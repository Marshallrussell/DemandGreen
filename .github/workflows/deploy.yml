name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Setup PostgreSQL
        uses: AkhileshNS/setup-postgres@v1
        with:
          postgres-version: '13'
          postgres-db: 'test_db'
          postgres-user: 'test_user'
          postgres-password: 'test_password'

  backend:
    name: Backend Tests
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Backend Dependencies
        run: |
          cd backend
          npm install express jest supertest --save

      - name: Create Sample Backend Tests
        run: |
          mkdir -p backend/tests
          echo "const request = require('supertest');\nconst express = require('express');\n\nconst app = express();\napp.get('/', (req, res) => res.status(200).send('Hello World'));\n\ndescribe('GET /', () => {\n  it('should return Hello World', async () => {\n    const res = await request(app).get('/');\n    expect(res.statusCode).toEqual(200);\n    expect(res.text).toEqual('Hello World');\n  });\n});" > backend/tests/sample.test.js

      - name: Run Backend Tests
        run: |
          cd backend
          npx jest

  frontend:
    name: Frontend Tests
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm install

      - name: Run Frontend Tests
        run: |
          cd frontend
          npm test

  linting:
    name: Linting
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Linting Tools
        run: |
          cd frontend
          npm install eslint --save-dev

      - name: Run Linter
        run: |
          cd frontend
          npx eslint .

  deploy:
    name: Deployment
    runs-on: ubuntu-20.04
    needs: [backend, frontend]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy Application
        run: |
          echo "Deploying application..."
          # Add deployment commands here, e.g., Docker build/push or upload to a server
